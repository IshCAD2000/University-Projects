/* Solution to comp20005 Assignment 2, 2020 semester 1.

	This code has an input in the form of:

max x value | Max y value 
x-pos of light  | y-pos of light | intensity of light in lumens

Example:

maxx	maxy
100.0	100.0
x	y	lm
0	0	3350
0	50	3350
0	100	3350
50	0	3350
50	50	5000
50	100	3000
100	0	3000
100	50	3000
100	100	3000
500	500	1000
   
And outputs a map of the carpark with symbols representing the respective intensities of light.

By: Ish Kadakia
*/

#include <stdio.h>
#include <math.h>


// defining terms
#define MAXLAM 99
#define MAXDIM 2
#define HEIGHT 8.25
#define MINLUX 1
#define S2GRID 100
#define PI 3.14159

// Defining S3 terms
#define S3COL 72	
#define S3MAX 800
#define L_1 45
#define L_3 50
#define L_5 52
#define L_7 54
#define L_9 56
#define M_10 43

// Defining the data structure used for the assignment
typedef struct lamp_t {
	
	double x;
	double y;
	double lum;
} lamp_t;

// Function Prototypes

void ridline();
int extractinfo(lamp_t lamps[]);
void stage1(lamp_t lamps[], int numlam, float dim[]);
void stage2(lamp_t lamps[], int numlam, float dim[]);
void stage3(lamp_t lamps[], int numlam, float dim[]);
void calc_s2_cell(lamp_t lamp, float dim[], 
	double light_arr[S2GRID][S2GRID]);
void calc_s3_cell(lamp_t lamp, float dim[], double light_s3[S3MAX][S3COL],
	int n_cell, double cellh, double cellw);
int sym_cell(double light_arr[S3MAX][S3COL], int i, int j);
double calc_lx(double lum, double dis);
double calc_dis(double lamp_pos, double i);

// Here we go again

int main(int argc, char *argv[]) {	
	
	/* This is the function that makes everything happen */
	lamp_t lamps[MAXLAM];
	float dim[MAXDIM]={0, 0};
	int numlam=0;
	
	// Getting rid of the first line
	ridline();
	
	// Finding dimensions
	scanf("%f\t%f\n", &dim[0], &dim[1]);
	
	// Getting rid of the third line
	ridline();
	
	// Extract Info
	numlam = extractinfo(lamps);
	
	// Stage 1...
	stage1(lamps, numlam, dim);
	
	// Stage 2...
	stage2(lamps, numlam, dim);
	
	// Stage 3...
	stage3(lamps, numlam, dim);
	
	printf("Ta daa!\n");
	return 0;
}

void
stage1(lamp_t lamps[], int numlam, float dim[]) {
	/* This function prints out the stage 1 output*/
	
	int i;
	double tot_out=0;
	
	// Finding the total value of Lumens
	for (i=0; i<numlam; i++) {
		tot_out += lamps[i].lum;
	}
	
	//Printing the output
	printf("S1, north-east corner at x= %5.1lfm, y= %5.1lfm\n", 
		dim[0], dim[1]);
	printf("S1, number of lights = %2d\n", numlam);
	printf("S1, total light output = %6.0lflm\n\n", tot_out);
}

void
stage2(lamp_t lamps[], int numlam, float dim[]) {
	
	// This function calculates and outputs all required S2 outputs.
	
	/* Creating variables and creating light_arr, an array that holds the 
       value of lux at each centroid point of each cell */
       
	int i, j=0, tot_bright=0;
    double light_arr[S2GRID][S2GRID];
	
    // Initializing the light array
	for (i=0; i<S2GRID; i++) {
		for (j=0; j<S2GRID; j++) {
			light_arr[i][j] = 0;
		}	
	}

	// The easy bit of Stage 2, printing out the cell sizes
	printf("S2, 100 x 100 grid, %2.2lfm x %2.2lfm cells\n",	
		dim[0]/S2GRID, dim[1]/S2GRID);
	
	// Iterating through each lamp and altering the light array accordingly
	for (i=0; i<numlam; i++) {
		calc_s2_cell(lamps[i], dim, light_arr);
	}

	// Checking through the light array to check number of cells under MINLUX
	for (i=0; i<S2GRID; i++) {
		for (j=0; j<S2GRID; j++) {
			if (light_arr[i][j] < MINLUX) {
				tot_bright ++;
			}
		}
	}
	
	// Printing the last line of the output
	printf("S2, fraction of cell centroids below 1.0lx requirement =");
	printf(" %4.1lf%%\n",(tot_bright/(pow(S2GRID, 2))) * 100   );
	
	printf("\n");

}

void
stage3(lamp_t lamps[], int numlam, float dim[]) {
	
	/* This function calculates and processes the S3 output */
	
	// Initializing variables and initializing the array light_s3
	int i, j, sym;
	double cellw=0, cellh=0, n_cell=0;
	static double light_s3[S3MAX][S3COL];
	
	// Initializing the 2d array
	for (i=0; i<S3MAX; i++) {
		for (j=0; j<S3COL; j++) {
			light_s3[i][j] = 0;
		}
	}
	
	cellw = dim[0]/S3COL;
	n_cell = round(dim[1] / (1.8*cellw));
	cellh = dim[1]/n_cell;
	
	// First line of S3, printing out the cell dimensions
	printf("S3,  72 x %3.0f grid, %2.2lfm x %2.2lfm cells\n",
		n_cell, cellw, cellh);
	
	// Adds the lux value to each point in light_s3
	for (i=0; i<numlam; i++) {
		calc_s3_cell(lamps[i], dim, light_s3, n_cell, cellh, cellw);
	}
	
	// This is the printing phase of the S3 function
	// Iterates to each cell and prints the cell accordingly
	for (i=n_cell-1; 0<=i; i--) {
		for (j=0; j<S3COL; j++) {
			sym = sym_cell(light_s3, i, j);
			
			if (j==0) {
				printf("S3, %c", sym);  // Prints the Stage number
			} else if (j==S3COL-1) {
				printf("%c\n", sym);    // When the end of the line is reached
			} else {
				printf("%c", sym);      // Midpoint character printing
			}
		}
	}
	printf("\n");
}

void
calc_s2_cell(lamp_t lamp, float dim[], double light_arr[S2GRID][S2GRID]) {
	
	/* This function is the main calculation function for Stage 2, altering
	   the grid light_arr to find the light at each centroid point */

	int i, j;
	double dis, light;
	
	// Iterating through the rows and values, calculating light
	for (i=0; i<S2GRID; i++) {

		for (j=0; j<S2GRID; j++) {
			dis = sqrt( pow(calc_dis(lamp.x, (i+0.5)*(dim[0]/(S2GRID))), 2) 
		          	+ pow(calc_dis(lamp.y, (j+0.5)*(dim[1]/(S2GRID))), 2));
			light = calc_lx(lamp.lum, dis);						 
			
			// Add the light into the array
			light_arr[i][j] += light;				
		}
	}
}

void
calc_s3_cell(lamp_t lamp, float dim[], double light_s3[S3MAX][S3COL],
	int n_cell, double cellh, double cellw) {
	
	/* This function is the real mvp for S3, it calculates the light in each
		cell at the centroid, and adds it to the array of light_s3 */

	int i, j;
	double dis, light;
	
	//  Now iterate and calculate each cell centroid as we did in S2
	for (i=0; i<n_cell; i++) {

		for (j=0; j<S3COL; j++) {
			
			// This carries out a similar function as to what was done in S2
			dis = sqrt( pow(calc_dis(lamp.y, (i+0.5)*cellh), 2) 
		            	+ pow(calc_dis(lamp.x, (j+0.5)*cellw), 2));
			light = calc_lx(lamp.lum, dis);
				
			light_s3[i][j] += light;				
		}
	}	
}

int
sym_cell(double light_arr[S3MAX][S3COL], int i, int j) {
	
	/* This long function returns the integer value required for each of the 
	   symbols required in the output map of S3*/
	
    // Initializing the values that correspond to 0
	double cell;
	int L_2, L_4, L_6, L_8, L_10;
	L_2= L_4=L_6=L_8=L_10=32;
	
	cell = light_arr[i][j];
	
	// Now go through each cell and figure out which symbol it means
	if (cell<1){
		return L_1;
	} else if (cell < 2) {
		return L_2;
	} else if (cell < 3) {
		return L_3;
	} else if (cell < 4) {
		return L_4;
	} else if (cell < 5) {
		return L_5;
	} else if (cell < 6) {
		return L_6;
	} else if (cell < 7) {
		return L_7;
	} else if (cell < 8) {
		return L_8;
	} else if (cell < 9) {
		return L_9;
	} else if (cell < 10) {
		return L_10;
	}
	return M_10; // If none apply
}

double
calc_lx(double lum, double dis) {
	
	/* This function calculates and returns the lx output of the lamp at a dis 
	away from the pole */
	return (lum/(4*PI*( pow(HEIGHT, 2) + pow(dis, 2) ) ) );	
}

double
calc_dis(double lamp_pos, double i) {
	/* Takes two points in line on the axis and finds the positive 
	   difference distance to use in the main calculation program */
	   
	if (lamp_pos <= i) {
		return lamp_pos - i;
	}
	return i - lamp_pos;
}

void
ridline(void) {
	
	/* This function iterates over the  line and does nothing else,
	This eliminates the row from future scanning */	
	char ch;
	
	// Iterate until the first newline character
	while (scanf("%c", &ch)) { 
		if (ch == '\n') {
			break;
		}
	}
}

int
extractinfo(lamp_t lamps[]) {
	
	/* Function to parse all data into their respective arrays*/	
	int i;
	
	// Iterates through each row and puts data into their arrays
	for (i = 0; i<MAXLAM; i++) {
			if (scanf("%lf\t%lf\t%lf\n", &lamps[i].x, &lamps[i].y,
				&lamps[i].lum) == EOF) {
					break;
			} 
	}
	// Returning the number of lines, finding num_wag
	return i;
}

//Programming is fun
