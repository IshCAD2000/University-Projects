/* Solution to comp20005 Assignment 1, 2020 semester 1.

   This Assignment was all about anaylsing trucks of coal, and the most ideal 
   way to organize them so that a certain threshold is not exceeded.

   This code demostrates a basic knowledge of C.

   Example Input (tsv file):

tonnes	percent
123.0718739	77.69622188
124.6605619	65.46740916
75.59136095	58.47605148
103.4941315	86.85012785
96.67285131	51.48810468
81.36994248	29.96661516
125.9180894	65.2677038
107.1884756	30.51079283
99.23950913	47.87182946
104.0020945	99.21012137
87.96559435	24.67776633

   By: Ish Kadakia
*/

/*-------------------------------------------------------------------------*/
#include <stdio.h>

// Defining Important Terms
#define MAXWAG 100000000
#define MINTON 375
#define MINPER 52.5

// Function Prototypes
void rid_first_line(void);
int extractinfo(double ton[], double per[]);
void stage_1(double ton[], double per[], int num_wag);
void stage_2(double ton[], double per[], int num_wag);
void stage_3(double ton[], double per[], int num_wag);
void initialize_arr_int(int *arr, int size);
int check_con(double t_arr[], double p_arr[], double result_arr[], int num_wag,
	int begin);
int min_finder(double ton[], double per[], int *cons, int con_n, int i);
int check_con_3(double ton[], double per[], int *cons, int con_n, int numwag);
void stage_3_calc(double ton[], double per[], int num_wag, int *cons, int con_n, 
	double res_arr[]);




int 
main(int argc, char *argv[]) {	
	
	double ton[MAXWAG], per[MAXWAG];
	int num_wag;
	
	
	// Getting rid of the first line
	rid_first_line();
	
	// Extract information from the data
	num_wag = extractinfo(ton, per);
	
	// Printing the Stage 1 output
	stage_1(ton, per, num_wag);

	// Printing Stage 2 output
	stage_2(ton, per, num_wag);
	
	// Printing Stage 3 output 
	stage_3(ton, per, num_wag);
	
	// That's all folks! Ish out.
	printf("\nTa daa!\n");
	return 0;
}

void
rid_first_line(void) {
	
	/* This function iterates over the first line and does nothing else,
	This eliminates the first row from future scanning */
	
	char ch;
	// Iterate until the first newline character
	while (scanf("%c", &ch)){ 
		if (ch == '\n') {
			break;
		}
	}
}

int 
extractinfo(double ton[], double per[]) {
	
	/* Function to parse all data into their respective arrays*/
	
	int i;
	
	// Iterates through each row and puts data into their arrays
	for (i = 0; i<MAXWAG; i++) {
			if (scanf("%lf\t%lf\n", &ton[i], &per[i]) == EOF) {			
				return i;
			} 
	}
	// Returning the number of lines, essentially finding num_wag
	return i;
}

void
stage_1(double ton[], double per[], int num_wag) {
	
	/* This function calculates and displays the required data for Stage 
	1 */

	int i; 
	double tot_weight=0, tot_percent=0, sum1=0;
	
	// Caculating the total weight and the concentration of each wagon
	for (i=0; i<num_wag; i++) {
		sum1 = sum1 + (ton[i]*per[i]);
		tot_weight += ton[i];
		}
	tot_percent = sum1/tot_weight;
	
	// Printing Stage 1 output
	printf("S1,\twagon\t 1, tonnes= %3.1lf,  %%= %2.1lf\n", ton[0], per[0]);
	printf("S1,\twagon\t%2d, tonnes= %3.1lf,  %%= %2.1lf\n", num_wag,
		ton[num_wag-1],	per[num_wag-1]);
	printf("S1,  whole train,   tonnes= %3.1lf,  %%= %2.1lf\n", tot_weight,
		tot_percent);

	printf("\n");

}

void
stage_2(double ton[], double per[], int num_wag) {
	
	/* This block of code is to process Stage 2 infomation, and to output it 
	accordingly
	*/
	
	/* result_arr is an array with the following format: 
		result_arr[0] = total weight of specified consignment
		result_arr[1] = total percentage of specified consignment
		result_arr[2] = low boundary wagon
		result_arr[3] = high boundary wagon
	*/
	int i, j, lo, hi, wag_dump[num_wag], con_num=0; 	
	double w_keep=0.0, w_dump=0.0, p_keep=0.0, p_dump=0.0, result_arr[4], sum=0;
	
	// initializing arrays
	initialize_arr_int(wag_dump, num_wag);
	
	// extracts and processes information for outputs
	for (i=0; i<num_wag; i++) {
		
		// If consignment is valid
		if ((check_con(ton, per, result_arr, num_wag, i)) == 1) {
			w_keep = result_arr[0];
			p_keep = result_arr[1];
			lo = result_arr[2];
			hi = result_arr[3];
			i = hi;
			con_num += 1;
			printf("S2, consignment %2d, tonnes= %3.1lf,  %%= %2.1lf\n", 
				con_num, w_keep, p_keep);
			printf("S2,                 wagons= ");
			for (j=lo; j<=hi; j++) {
				wag_dump[j] = con_num;
					printf("%d ", j+1);
			}	
			printf("\n");
			
		 // If consignment is not valid (ie. to be dumped)		
		 } else if ((check_con(ton, per, result_arr, num_wag, i)) == 2) {
			lo = result_arr[2];
			hi = result_arr[3];
			for (j=lo; j<=hi; j++) {
				wag_dump[j] = 0;
			}
			i = hi;
		} 
			
	}
	
	
	// Processing dumped wagon info
	for (i=0; i<num_wag; i++){
		if (wag_dump[i] == 0) {
			sum += ton[i]*per[i];
			w_dump += ton[i];
			p_dump = sum/w_dump;
		}
 	}
	printf("S2,   total dumped, tonnes= %3.1lf,  %%= %2.1lf\n",
		w_dump, p_dump);
	printf("S2,                 wagons= ");
	for (j=0; j<num_wag; j++) {
		if (wag_dump[j] == 0) {
			printf("%d ", j+1);
		}
	}
	printf("\n\n");
}

void
stage_3(double ton[], double per[], int num_wag) {
	
	/* This function calculates and outputs Stage 3 to the user, 
	and allows me to finally finish this assignment */

	/* res_arr is a double array consisting of the following info:
			res_arr[0] = total weight
			res_arr[1] = total concentration
	*/
	int i, j, cons[num_wag], con_n=1, on=1, min_pos; 
	double w_tot=0.0, p_tot=0.0, sum=0.0, res_arr[2];
	
	//Initialize all arrays
	initialize_arr_int(cons, num_wag);
	res_arr[0] = 0;
	res_arr[1] = 1;
	
	// Main loop, goes through every wagon for further calculation
	for (i=0; i<num_wag; i++) {
		sum += (ton[i]*per[i]);
		w_tot += ton[i];
		cons[i] = con_n;
		if (w_tot >= MINTON) {     
			p_tot = sum/w_tot;
			if (p_tot >= MINPER) {   // Valid, Reinitialize and start again
				con_n += 1;	
				w_tot = 0.0;
				p_tot = 0.0;
				sum = 0.0;
		
			} else {                 //  When we need to find a new wagon
				while (on) {
					min_pos = min_finder(ton, per, cons, con_n, i);
					// If the new carriage is not valid, get next wagon
					if ((check_con_3(ton, per, cons, con_n, num_wag) == 0)
						|| 	(min_pos == num_wag)) {
						p_tot -= ton[i]*per[i];
						w_tot -= ton[i];
						break;
					// If new carriage is valid, reinitialize and look for more
					} else if (check_con_3(ton, per, cons, con_n, num_wag)) {
						con_n += 1;
						break;		
						
					}
				con_n += 1;	
				}	
			}
		} else if ((i == num_wag-1) && (con_n == 1)) {
			for (i=0; i<=num_wag; i++) {
				cons[i] = 0;
			}
		}
	}
	if (cons[num_wag-1] == con_n) { // If the last wagon is not in a consignment
		cons[num_wag-1] = 0;
	}
	// Printing the Stage 3 output for the consignments
	for (i=1; i<con_n; i++) {
		stage_3_calc(ton, per, num_wag, cons, i, res_arr);
		printf("S3, consignment %2d, tonnes= %3.1lf,  %%= %3.1lf\n", i, 
			res_arr[0], res_arr[1]);
		printf("S3,                 wagons=");
		for (j=1; j<=num_wag; j++) {  // Printing wagons
			if (cons[j-1] == i)
			printf(" %d", j);
		}
		printf("\n");
	}

	// Printing the stage 3 wagons dumped output
	stage_3_calc(ton, per, num_wag, cons, 0, res_arr);
	printf("S3,   total dumped, tonnes= %3.1lf,  %%= %3.1lf\n", res_arr[0],
		res_arr[1]);
	printf("S3,                 wagons=");
	// Printing out the dumped wagon numbers output.
	for (j=1; j<=num_wag; j++) {
		if (cons[j-1] == 0) {
		printf(" %d", j);
		}
	}
	printf("\n");
	
}

void
initialize_arr_int(int *arr, int size) {
	
	/* Iterates through the whole array and sets all positions to 0 */
	int i;
	
	for (i=0; i<size; i++) {
		arr[i] = 0;
	}
}

int
check_con(double t_arr[], double p_arr[], double result_arr[], int num_wag,
	int begin) {

	/* This function calcualtes the tonnage and percentage content
	of potential consignments, and returns a value based on whether 
	the consignment should be processed or not.*/
	
	int i;
	double tot_w=0, tot_p=0, sum1=0;
	// Calculating and Assessing each potential consignment
	for (i=begin; i<num_wag; i++) {
		sum1 += (t_arr[i]*p_arr[i]);
		tot_w += t_arr[i];
		tot_p = sum1/tot_w;
		
		result_arr[0] = tot_w;
		result_arr[1] = tot_p;
		result_arr[2] = begin;
		result_arr[3] = i;
		
		if (tot_w >= MINTON) {
				if (tot_p >= MINPER) {
					return 1; 	
				} else {
					return 2;
				}
		}
		
	}	
	return 0;
}

int
min_finder(double ton[], double per[], int *cons, int con_n, int hi) {
	/* This function does calculations to determine the next minimum 
	concentration in the current consignment.  When the minimum is found, 
	set the consignment number of it in the con[] array to 0, so that it 
	is registered as a dumped wagon. */

	int i, min_pos=0; 
	double min=0.0, conc=0.0;

	// Finding the first valid wagon in the consignment, setting it to 0
	for (i=0; i<=hi; i++) {
		if (cons[i] == con_n) {
			min = ton[i]*per[i];
			min_pos = i;
			break;
		}
	}
	
	// Finding the minimum in that consignment
	for (i=0; i<=hi; i++) {
		if (cons[i] == con_n) {
			conc = ton[i]*per[i];
			if ((i != min_pos) && (conc < min)) {
				min = conc;
				min_pos = i;
			}
		}
	}
	
	// Setting the consignment number of the minimum to 0, return min_pos
	cons[min_pos] = 0;
	return min_pos;
}	


int
check_con_3(double ton[], double per[], int *cons, int con_n, 
	int num_wag) {

	/* This is the Stage 3 version of check_con, where the function recives
	an array to base consignments off of, rather than a hi and lo value */

	int i, valid_con = 1, invalid_con = 0;
	double sum=0.0, w_tot=0.0, p_tot=0.0;
	
	// Excecuting usual calculations to calculate validity of array
	for (i=0; i<=num_wag; i++) {
		if (cons[i] == con_n) {      // Checks if i is the current consignment	
			sum += ton[i]*per[i];
			w_tot += ton[i];
			if (w_tot >= MINTON) {
				p_tot = sum/w_tot;
				if (p_tot >= MINPER) {
					return valid_con;
				} else {
					return invalid_con;
				}
			}
		}
	}
	return invalid_con;
}

void
stage_3_calc(double ton[], double per[], int num_wag, int *cons, int con_n, 
	double res_arr[]) {
	
	/* This function carries out the calculations for total weight and 
	total percentage of the consignment, and alters an res_arr to be used 
	later */
	
	int i;
	double sum=0.0, w_tot=0.0;
	
	// iterate through all the valid consignment wagons.
	for (i=0; i<num_wag; i++) {
		if (cons[i] == con_n) {
			sum += ton[i]*per[i];
			w_tot += ton[i];
			res_arr[0] = w_tot;
			res_arr[1] = sum/res_arr[0];
		}
	}
}

// here's to an extra 0.5 marks :P
// Programming is fun 
